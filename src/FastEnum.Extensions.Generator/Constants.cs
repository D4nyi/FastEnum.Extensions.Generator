namespace FastEnum.Extensions.Generator;

internal static class Constants
{
    internal const string Version = "1.5.0";

    internal const string EnumMemberAttributeName = "EnumMemberAttribute";
    internal const string DisplayAttributeName = "DisplayAttribute";
    internal const string DescriptionAttributeName = "DescriptionAttribute";
    internal const string FlagsAttributeName = "FlagsAttribute";

    internal const string EnumExtensionsGenerator = "FastEnum.Extensions.Generator.EnumExtensionsGenerator";

    internal const string ExtensionsAttributeFullName = "FastEnum.Attributes.ExtensionsAttribute";
    internal const string ExternalExtensionsAttributeFullName = "FastEnum.Attributes.ExtensionsAttribute`1";
    internal const string ExternalExtensionsAttributeShortName = "ExtensionsAttribute`1";
    internal const string AttributesFile = "FastEnumExtensionsAttribute.g.cs";

    internal static readonly string[] UnsupportedVisibilityModifiers = ["private", "protected", "protected internal", "file"];

    internal const string Attributes =
        $"""
          // <auto-generated/>

          namespace FastEnum.Attributes;

          /// <summary>Marks an enum to generate optimized extensions for it.</summary>
          [global::System.Diagnostics.ConditionalAttribute("DEBUG")]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{EnumExtensionsGenerator}", "{Version}")]
          [global::System.AttributeUsageAttribute(global::System.AttributeTargets.Enum, AllowMultiple = false, Inherited = false)]
          internal sealed class ExtensionsAttribute : global::System.Attribute;

          /// <summary>Can be used to mark an owned or an external enum to generate optimized extensions for it.</summary>
          [global::System.Diagnostics.ConditionalAttribute("DEBUG")]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{EnumExtensionsGenerator}", "{Version}")]
          [global::System.AttributeUsageAttribute(global::System.AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
          internal sealed class ExtensionsAttribute<TEnum> : global::System.Attribute where TEnum : Enum;
          """;

    internal const string FileHeader =
        """
        // <auto-generated/>

        #nullable enable

        """;
}
