namespace FastEnum.Extensions.Generator;

internal static class Constants
{
    internal const string Version = "1.4.0";

    internal const string EnumMemberAttributeName = "EnumMemberAttribute";
    internal const string DisplayAttributeName = "DisplayAttribute";
    internal const string DescriptionAttributeName = "DescriptionAttribute";
    internal const string FlagsAttributeName = "FlagsAttribute";

    internal const string EnumExtensionsGenerator = "FastEnum.Extensions.Generator.EnumExtensionsGenerator";

    internal const string ExtensionsAttributeFullName = "FastEnum.ExtensionsAttribute";
    internal const string AttributesFile = "FastEnumExtensionsAttribute.g.cs";

    internal static readonly string[] UnsupportedVisibilityModifiers = ["private", "protected", "protected internal", "file"];

    internal const string InitialExtraction = nameof(InitialExtraction);
    internal const string RemovingNulls = nameof(RemovingNulls);
    internal const string CreateDiagnostics = nameof(CreateDiagnostics);
    internal const string BuildGenerationSpec = nameof(BuildGenerationSpec);
    internal const string CollectedGenerationData = nameof(CollectedGenerationData);

    // [global::System.Diagnostics.ConditionalAttribute("DEBUG")]
    internal const string Attributes =
        $$"""
          // <auto-generated/>

          namespace FastEnum
          {
              /// <summary>Marks an enum to generate optimized extensions for it.</summary>
              [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{EnumExtensionsGenerator}}", "{{Version}}")]
              [global::System.AttributeUsageAttribute(global::System.AttributeTargets.Enum, AllowMultiple = false, Inherited = false)]
              internal sealed class ExtensionsAttribute : global::System.Attribute { }
          }
          """;

    internal const string FileHeader =
        """
        // <auto-generated/>

        #nullable enable

        """;
}
